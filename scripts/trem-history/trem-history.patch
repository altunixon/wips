--- /media/alt/bad/wips/scripts/trem-history/trem-history.sh	2020-07-21 17:31:05.648381666 +0900
+++ /home/alt/git-repo/script-bash/trem-history.sh	2020-06-30 20:16:40.593868291 +0900
@@ -9,47 +9,21 @@
 
 function warning_empty() {
     if [ -z $3 ]; then
-        echo -e "[ERRO] Should not try running [$1] with Empty $2"
+        echo -e "Should not try running [$1] with Empty [$2]"
         echo -e "$msg_help"
         exit 10
     fi
 }
 
-function warning_nofile() {
-    file_count=$(ls -1 ./*"${1}"* | wc -l)
-    file_quit=${2:-HARD}
-    if [ $file_count -le 0 ]; then
-        case $file_quit in
-            SOFT|soft)
-                echo -n 'NULL'
-            ;;
-            *)
-                echo -e "[WARN] Could not found any file matching [${1}] with: ls ./*'${1}'*"
-                exit 404
-            ;;
-        esac
-    else
-        [ "$file_quit" == 'SOFT' ] && echo -n "$file_count"
-    fi
-}
-
 function recycle_torrent() {
     if [ -d "$trem_recycle" ]; then
-        mv -v -f ./*"${1}"* "${trem_recycle%%/}/"
+        mv -f ./*"${1}"* "${trem_recycle%%/}/"
     else
-        echo -e "[WARN] RecycleBin: '${trem_recycle}' is Missing\nMaybe cleanup by hand?: rm ./*\"${1}\"*"
+        echo -e "RecycleBin: '${trem_recycle}'\nMaybe cleanup by hand?: rm ./*\"${1}\"*"
         # rm ./*"${1}"*
     fi
 }
 
-function undo_recycle() {
-    if [ -d "$trem_recycle" ]; then
-        mv --no-clobber -v "${trem_recycle%/}/"*"${1}"* ./
-    else
-        echo -e "[WARN] RecycleBin: '${trem_recycle}' is Missing\nMaybe restore by hand?: mv ${trem_recycle}/*\"${1}\"* ./"
-    fi
-}
-
 trem_mode=${1:-ls}
 
 echo -e "START [$trem_mode]"
@@ -61,7 +35,7 @@
                 echo "$x" | awk -F '|' '{print "trem \""$2"\" *"$1"*"}'
             done
         else
-            grep "$trem_key" "$path_mapfile" | awk -F '|' -v trem="${trem_alias[@]}" '{print trem" \""$2"\" *"$1"*"}'
+            grep "$trem_key" "$path_mapfile" | awk -F '|' '{print "trem "$2" "$1}'
         fi
     ;;
     add)
@@ -69,7 +43,6 @@
         warning_empty $trem_mode "DEST" $trem_dst
         trem_key=${3:-}
         warning_empty $trem_mode "KEY" $trem_key
-        warning_nofile $trem_key 'HARD'
         if [ $(grep "${trem_key}" $path_mapfile | wc -l) -gt 0 ]; then
             # probly should check for multiple match, single match will have to do for now
             trem_map=$(grep -m 1 "$trem_key" "$path_mapfile")
@@ -88,53 +61,49 @@
                         echo -e "Ignore Mapped Match, Staying with '$trem_dst'"
                         # Update mapfile with new keyword&path
                         sed -i "/^$mapd_key/d" "$path_mapfile"
-                        echo -e "${trem_key}|${trem_dst}\n" >> $path_mapfile
+                        echo "${trem_key}|${trem_dst}" >> $path_mapfile
                     ;;
                 esac
             fi
         else
-            echo -e "${trem_key}|${trem_dst}\n" >> $path_mapfile
+            echo "${trem_key}|${trem_dst}" >> $path_mapfile
         fi
         # Add torrent
         ${trem_alias[@]} "${trem_dst}" ./*"${trem_key}"*
-        [ $? -eq 0 ] && recycle_torrent "${trem_key}" || echo -e "[ERRO] ADD '$trem_key' to '$trem_dst' Failed"
+        [ $? -eq 0 ] && recycle_torrent "${trem_key}"
     ;;
     replay)
         trem_key=${2:-}
         warning_empty $trem_mode "KEY" $trem_key
         trem_maps=($(grep "${trem_key}" "$path_mapfile"))
         if [ ${#trem_maps[@]} -gt 1 ]; then
-            grep -n "${trem_key}" "$path_mapfile"
+            trem_li=$((${#trem_maps[@]} - 1))
             echo -e "Multiple [$trem_key] Match:"
-            for map_ln in ${!trem_maps[@]}; do
-                echo -e "[$map_ln]: '${trem_maps[map_ln]}'"
+            for map_line in $(seq 0 $trem_li); do
+                # ??? might be wrong
+                echo -e "[$map_line]: '${trem_maps[map_line]}'"
             done
-            read -p "Choose [0-${#trem_maps[@]}], Default [0]: " map_choice
+            read -p "Choose [0-${trem_li}] to continue: " map_choice
             case $map_choice in
                 [0-9]*) trem_map_chosen="${trem_maps[map_choice]}";;
                 *) trem_map_chosen="${trem_maps[0]}";;
             esac
         else
             trem_map_chosen="${trem_maps[@]}"
+            warning_empty $trem_mode "SEARCH" $trem_map_chosen
         fi
         trem_key=$(echo "$trem_map_chosen" | awk -F '|' '{print $1}')
         trem_dst=$(echo "$trem_map_chosen" | awk -F '|' '{print $2}')
-        warning_nofile $trem_key 'HARD'
         ${trem_alias[@]} "${trem_dst}" ./*"${trem_key}"*
-        [ $? -eq 0 ] && recycle_torrent "${trem_key}" || echo -e "[ERRO] REPLAY '$trem_key' Failed"
+        [ $? -eq 0 ] && recycle_torrent "${trem_key}"
     ;;
     autoplay)
         trem_src=${2:-'./'}
         for map_line in $(cat "$path_mapfile"); do
             trem_key=$(echo "$map_line" | awk -F '|' '{print $1}')
             trem_dst=$(echo "$map_line" | awk -F '|' '{print $2}')
-            check_file=$(warning_nofile $trem_key 'SOFT')
-            if [ "$check_file" != 'NULL' ]; then
-                ${trem_alias[@]} "${trem_dst}" ./*${trem_key}*
-                [ $? -eq 0 ] && recycle_torrent "${trem_key}" || echo -e "[ERRO] AUTOPLAY Failed"
-            else
-                echo -e "[WARN] Skip autoplay for keyword [$trem_key] since there are no file match in current dir."
-            fi
+            ${trem_alias[@]} "${trem_dst}" ./*${trem_key}*
+            [ $? -eq 0 ] && recycle_torrent "${trem_key}"
         done
     ;;
     *)
