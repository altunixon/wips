--- /home/alt/git-repo/script-python3/databases/./dldb_sqlweaver.py	2021-02-12 23:44:59.681075827 +0900
+++ ./dldb_sqlweaver.py	2021-02-16 15:31:03.305498307 +0900
@@ -8,88 +8,82 @@
         return key
 
 def sql_weaver(template_name, **template_inserts):
-    if template_name in sql_query_templates.keys():
-        query_template  = sql_query_templates[template_name]
-        query_format    = template_inserts.pop('type', 'mysql')
-        query_command   = query_template[query_format] \
-            if query_template[query_format] is not None \
-            else query_template['mysql']
-        query_table     = template_inserts.pop('table', None)
-        query_schema    = template_inserts.pop('schema', None)
-        query_uniq      = template_inserts.pop('uniq', None)
-        query_fetch     = template_inserts.pop('fetch', query_template['fetch'])
-        if query_table is not None:
-            if query_template['inserts'] is None:
-                query_string = query_command.format_map(
-                    FormatDefault(
-                        table   = query_table, 
-                        schema  = query_schema, 
-                        **template_inserts
-                    )
+    assert template_name in sql_query_templates.keys(), 'SQL_PARSER - Invalid Template: "%s", Values: %s' % (template_name, template_inserts)
+    query_template  = sql_query_templates[template_name]
+    query_format    = template_inserts.pop('type', 'mysql')
+    query_command   = query_template[query_format] \
+        if query_template[query_format] is not None \
+        else query_template['mysql']
+    query_table     = template_inserts.pop('table', None)
+    query_schema    = template_inserts.pop('schema', None)
+    query_uniq      = template_inserts.pop('uniq', None)
+    query_fetch     = template_inserts.pop('fetch', query_template['fetch'])
+    if query_table is not None:
+        if query_template['inserts'] is None:
+            query_string = query_command.format_map(
+                FormatDefault(
+                    table   = query_table, 
+                    schema  = query_schema, 
+                    **template_inserts
+                )
+            )
+        else:
+            if query_template['join'] is None:
+                insert_names    = ', '.join(template_inserts.keys())
+                insert_values   = ', '.join(
+                    ["'%s'" % template_inserts[b] \
+                    for b in template_inserts.keys()]
+                )
+                query_values = query_template['inserts'].format(
+                    key     = insert_names,
+                    value   = insert_values
                 )
             else:
-                if query_template['join'] is None:
-                    insert_names    = ', '.join(template_inserts.keys())
-                    insert_values   = ', '.join(
-                        ["'%s'" % template_inserts[b] \
-                        for b in template_inserts.keys()]
-                    )
-                    query_values = query_template['inserts'].format(
-                        key     = insert_names,
-                        value   = insert_values
-                    )
-                else:
-                    key_values_pair = []
-                    for k, v in template_inserts.items():
-                        key_values_pair.append(
-                            query_template['inserts'].format(
-                                key     = k,
-                                value   = v
-                            )
+                key_values_pair = []
+                for k, v in template_inserts.items():
+                    key_values_pair.append(
+                        query_template['inserts'].format(
+                            key     = k,
+                            value   = v
                         )
-                    query_values = query_template['join'].join(key_values_pair)
-                query_string = query_command.format_map(
-                    FormatDefault(
-                        table   = query_table, 
-                        schema  = query_schema, 
-                        values  = query_values
                     )
+                query_values = query_template['join'].join(key_values_pair)
+            query_string = query_command.format_map(
+                FormatDefault(
+                    table   = query_table, 
+                    schema  = query_schema, 
+                    values  = query_values
                 )
-                if query_template['uniq'] and query_uniq is not None:
-                    query_tacky = sql_query_templates['tackon uniq']
-                    query_tackf = query_tacky[query_format] \
-                        if query_tacky[query_format] is not None \
-                        else query_tacky['mysql']
-                    query_string += query_tackf.format(
-                        values = query_tacky['join'].join(
-                            [query_tacky['inserts'].format(key=k, value=v) \
-                                for k, v in template_inserts.items()]
-                        )
-                    )
-                else:
-                    pass
-                query_string += ';'
-        else:
-            print_log(
-                'error', 
-                'SQL_PARSER - Invalid Table: "%s.%s", Values: %s', 
-                query_schema, 
-                query_table, 
-                template_inserts
             )
-            query_string = None
+            if query_template['uniq'] and query_uniq is not None:
+                query_tacky = sql_query_templates['tackon uniq']
+                query_tackf = query_tacky[query_format] \
+                    if query_tacky[query_format] is not None \
+                    else query_tacky['mysql']
+                query_string += query_tackf.format(
+                    values = query_tacky['join'].join(
+                        [query_tacky['inserts'].format(key=k, value=v) \
+                            for k, v in template_inserts.items()]
+                    )
+                )
+            else:
+                pass
+            query_string += ';'
     else:
         print_log(
             'error', 
-            'SQL_PARSER - Invalid Template: "%s", Values: %s', 
-            template_name, 
+            'SQL_PARSER - Invalid Table: "%s.%s", Values: %s', 
+            query_schema, 
+            query_table, 
             template_inserts
         )
         query_string = None
     #print('DEBUG:', query_string, query_fetch)
-    return {'query': query_string, 'fetch': query_fetch}
-
+    query_out = namedtuple('QueryDetails', ['query', 'fetch'])
+    return query_out(query_string, query_fetch)
 
+sql_charset = 'utf8mb4'
+sql_collate = 'utf8mb4_unicode_ci'
 
 sql_query_templates = {
     'select all'    : {
@@ -110,7 +104,7 @@
     },
     'create table'  : {
         #'mysql'     : "CREATE TABLE IF NOT EXISTS `{table}` ({values}) CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=4",
-        'mysql'     : "CREATE TABLE IF NOT EXISTS `{table}` ({values}) CHARSET=utf8 COLLATE=utf8_unicode_ci ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=2",
+        'mysql'     : "CREATE TABLE IF NOT EXISTS `{table}` ({values}) CHARSET=%s COLLATE=%s ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=4" % (sql_charset, sql_collate),
         'sqlite'    : "CREATE TABLE IF NOT EXISTS `{table}` ({values})",
         'inserts'   : '{key} {value}',
         'join'      : ', ',
